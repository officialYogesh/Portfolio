---
description: 
globs: 
alwaysApply: false
---
# PowerShell & Cursor Configuration Fix for Windows

## Problem Description
Cursor chat is not waiting for PowerShell commands to complete and cannot read output properly.

## Solution 1: Update VS Code/Cursor Settings

Add these settings to your Cursor `settings.json`:

```json
{
  "terminal.integrated.profiles.windows": {
    "PowerShell 7": {
      "path": "C:\\Program Files\\PowerShell\\7\\pwsh.exe",
      "args": ["-NoLogo", "-NoProfile"],
      "icon": "terminal-powershell"
    },
    "PowerShell 5": {
      "path": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
      "args": ["-NoLogo", "-NoProfile"],
      "icon": "terminal-powershell"
    }
  },
  "terminal.integrated.defaultProfile.windows": "PowerShell 7",
  "terminal.integrated.automationProfile.windows": {
    "path": "C:\\Program Files\\PowerShell\\7\\pwsh.exe",
    "args": ["-NoLogo", "-NoProfile", "-Command"]
  },
  "terminal.integrated.shellIntegration.enabled": true,
  "terminal.integrated.shellIntegration.showWelcome": false,
  "terminal.integrated.sendKeybindingsToShell": true,
  "terminal.integrated.detectLocale": "on",
  "terminal.integrated.env.windows": {
    "PSReadLineOption": "None"
  },
  "terminal.integrated.scrollback": 10000,
  "terminal.integrated.fastScrollSensitivity": 5,
  "terminal.integrated.smoothScrolling": true,
  "terminal.integrated.confirmOnExit": "hasChildProcesses",
  "terminal.integrated.showExitAlert": true,
  "terminal.integrated.enableBell": true,
  "terminal.integrated.persistentSessionReviveProcess": "onExit"
}
```

## Solution 2: PowerShell Execution Profile

Create a PowerShell profile that ensures proper output:

1. Create file: `$PROFILE.CurrentUserAllHosts` (usually `Documents\PowerShell\Profile.ps1`)
2. Add this content:

```powershell
# Ensure UTF-8 encoding
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
[Console]::InputEncoding = [System.Text.Encoding]::UTF8

# Set PSReadLine options for better automation
if (Get-Module -ListAvailable PSReadLine) {
    Set-PSReadLineOption -PredictionSource None
    Set-PSReadLineOption -BellStyle None
}

# Function to ensure proper command completion signaling
function Invoke-CommandWithCompletion {
    param([string]$Command)
    try {
        Invoke-Expression $Command
        Write-Host "Command completed with exit code: $LASTEXITCODE" -ForegroundColor Green
    } catch {
        Write-Host "Command failed: $_" -ForegroundColor Red
        Write-Host "Exit code: $LASTEXITCODE" -ForegroundColor Red
    }
}

# Alias for common commands
Set-Alias -Name pnpm-safe -Value Invoke-CommandWithCompletion
```

## Solution 3: Alternative Terminal Configuration

If the above doesn't work, try using Windows Terminal as the default:

```json
{
  "terminal.external.windowsExec": "wt.exe",
  "terminal.integrated.profiles.windows": {
    "Windows Terminal": {
      "path": "wt.exe",
      "args": ["-p", "PowerShell"]
    }
  },
  "terminal.integrated.defaultProfile.windows": "Windows Terminal"
}
```

## Solution 4: Command Execution Best Practices

When running commands in Cursor chat, use these patterns:

### For Package Management:
```powershell
# Instead of: pnpm build
# Use:
pnpm build; echo "Build completed with exit code: $LASTEXITCODE"
```

### For Type Checking:
```powershell
# Instead of: pnpm run type-check
# Use:
pnpm run type-check; echo "Type check completed with exit code: $LASTEXITCODE"
```

### For Linting:
```powershell
# Instead of: pnpm run lint
# Use:
pnpm run lint; echo "Lint completed with exit code: $LASTEXITCODE"
```

## Solution 5: Restart Sequence

After applying the above settings:

1. Close all Cursor/VS Code instances
2. Restart Windows Terminal (if using)
3. Open Cursor
4. Open a new terminal in Cursor
5. Test with: `echo "Test"; echo "Exit code: $LASTEXITCODE"`

## Verification Commands

Test these commands to verify the fix:

```powershell
# Test 1: Basic echo
echo "Hello World"; echo "Exit code: $LASTEXITCODE"

# Test 2: Command with potential failure
pnpm --version; echo "Exit code: $LASTEXITCODE"

# Test 3: Type checking
npx tsc --version; echo "Exit code: $LASTEXITCODE"
```

If output appears correctly and exit codes are shown, the fix is working.

## Additional Notes

- This issue is common with automated tools trying to interact with PowerShell
- The `-NoProfile` flag prevents profile loading issues
- Shell integration is crucial for proper communication
- UTF-8 encoding ensures character compatibility

