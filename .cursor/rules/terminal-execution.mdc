---
description:
globs:
alwaysApply: false
---
# Terminal Command Execution - CRITICAL RULES

## ðŸš¨ ABSOLUTE REQUIREMENT: WAIT FOR COMMAND COMPLETION ðŸš¨

**NEVER PROCEED UNTIL POWERSHELL COMMAND FULLY COMPLETES AND EXIT CODE IS VERIFIED**

### PowerShell 7 Execution Protocol

Based on Node.js child_process behavior and PowerShell 7 characteristics:

1. **EXECUTE COMMAND**: Run the terminal command
2. **WAIT FOR EXIT EVENT**: PowerShell process must emit 'exit' event
3. **VERIFY EXIT CODE**: Check that exit code is 0 (success) or handle error appropriately
4. **CONFIRM OUTPUT COMPLETE**: Ensure all stdout/stderr streams are closed
5. **VALIDATE RESULTS**: Check expected files/changes exist before proceeding
6. **CHECK FOR ERRORS**: Look for error messages even if exit code is 0

### Critical Waiting Requirements

- **User Shell**: PowerShell 7 at "C:\Program Files\PowerShell\7\pwsh.exe"
- **Working Directory**: C:\Users\Stark\Projects\Portfolio
- **Command Timeout**: Wait minimum 30 seconds for package operations
- **Exit Detection**: Command must show completion status or return to prompt
- **Stream Closure**: All output streams must be finished before proceeding
- **Silent Completion**: If no output is shown, command may have succeeded OR failed silently

### Commands Requiring Extended Verification

- **Package Installation**: `pnpm install`, `pnpm add` - Verify in package.json AND node_modules
- **Build Operations**: `pnpm build` - Look for "âœ“ Compiled successfully" or build errors
- **Type Checking**: `pnpm run type-check`, `npx tsc --noEmit` - Check for TypeScript errors
- **Linting**: `pnpm run lint`, `npx next lint` - Look for ESLint errors and warnings
- **Development Server**: `pnpm dev` - Wait for "Ready" or "Local:" URL output

### Process State Detection

Based on PowerShell behavior patterns:
- **Running**: Command executing, no prompt visible
- **Completed Successfully**: PowerShell prompt returns with no error output
- **Completed with Errors**: Error messages displayed, may still return to prompt
- **Hanging**: No output for >60 seconds (investigate with Ctrl+C)
- **Silent Success**: No output but exit code 0 (common with Next.js commands)
- **Silent Failure**: No output but exit code > 0 (must be detected)

### Verification Protocol Before Proceeding

For EVERY command:
1. **Check Command Exit**: Ensure PowerShell returned to prompt
2. **Verify Exit Code**: Use `$LASTEXITCODE` or `echo $?` to check exit status
3. **Look for Error Output**: Check for error messages in output
4. **Validate Expected Results**: Confirm expected files/changes exist
5. **Confirm Next Action**: Only proceed after 100% certainty of completion

### Error Handling

If command appears to hang:
1. Wait minimum 60 seconds for large operations
2. Check if PowerShell process is still active
3. If truly hung, suggest Ctrl+C and retry with verbose flags
4. Never assume completion without explicit confirmation

If command completes silently:
1. Check exit code explicitly with `echo $LASTEXITCODE`
2. Look for expected output files or changes
3. Re-run with verbose flags if uncertain
4. Don't assume success just because there's no visible error

### PowerShell-Specific Considerations

- PowerShell 7 may have different exit behavior than older versions
- Some commands may appear silent but still be running
- Package managers may download in background without visible progress
- Exit codes are critical - 0 = success, > 0 = failure
- Always wait for the PS prompt to return before continuing
- Commands like `next lint` may complete silently on success

### Common Silent Command Patterns

- `pnpm run lint` - Succeeds silently if no errors
- `pnpm build` - Shows build output or fails with errors
- `npx tsc --noEmit` - Silent on success, shows errors on failure
- `npx next lint` - Silent on success, shows linting errors on failure

**ABSOLUTELY NO EXCEPTIONS TO THIS RULE - ALWAYS VERIFY EXIT STATUS**

### User Settings.json Recommendations

```json
{
  "terminal.integrated.scrollback": 10000,
  "terminal.integrated.fastScrollSensitivity": 5,
  "terminal.integrated.mouseWheelScrollSensitivity": 1,
  "terminal.integrated.smoothScrolling": true,
  "terminal.integrated.confirmOnExit": "hasChildProcesses",
  "terminal.integrated.showExitAlert": true,
  "terminal.integrated.enableBell": true
}
```

### Automated Wait Protocol

For each command:
1. **Execute**: Run the command
2. **Monitor**: Wait for "Command completed" or full output
3. **Verify**: Check expected results (files, packages, etc.)
4. **Continue**: Proceed only after verification is complete

**NO USER CONFIRMATION REQUIRED - AUTOMATED VERIFICATION**

## VIOLATION CONSEQUENCES

Proceeding without proper verification causes:
- Incomplete installations leading to build failures
- Missing dependencies causing runtime errors  
- Broken development environment
- Loss of development time and progress

**I MUST ALWAYS WAIT FOR EXPLICIT USER CONFIRMATION**
